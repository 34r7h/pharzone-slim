{"version":3,"sources":["blocks/chit/chit-directive.es6"],"names":[],"mappings":";;AAAA,AAAC,CAAA,YAAY;AACX,cAAY,CAAC;;;;;;;;;;;;;;;;;;AAkBb,SAAO,CACJ,MAAM,CAAC,UAAU,CAAC,CAClB,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;;AAE3B,WAAS,IAAI,CAAC,GAAG,EAAE;AACjB,WAAO;AACL,cAAQ,EAAE,IAAI;AACd,WAAK,EAAE,EAAE;AACT,iBAAW,EAAE,qCAAqC;AAClD,aAAO,EAAE,KAAK;AACd,kBAAY,EAAE,MAAM;AACpB,gBAAU,EAAA,sBAAG;AACX,YAAI,EAAE,GAAG,IAAI,CAAC;AACd,UAAE,CAAC,IAAI,GAAG,MAAM,CAAC;AACjB,UAAE,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;OACxB;AACD,UAAI,EAAA,cAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE;;AAE1B,eAAO,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;AACtC,iBAAS,YAAY,CAAE,UAAU,EAAC;AAChC,cAAI;AACF,gBAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;;;;;;AAM/B,gBAAI,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,IAAI,EAAE;AAC5C,qBAAO,CAAC,CAAC;aACV;WACF,CACD,OAAO,CAAC,EAAE,EAAG;;AAEb,iBAAO,KAAK,CAAC;SACd,CAAC;AACF,oBAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA,GAAG,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;OAElI;KACF,CAAC;GACH;CACF,CAAA,EAAE,CAAE","file":"blocks/chit/chit-directive.js","sourcesContent":["(function () {\n  'use strict';\n\n  /**\n   * @ngdoc directive\n   * @name pharzone.directive:chit\n   * @restrict EA\n   * @element\n   *\n   * @description\n   *\n   * @example\n     <example module=\"pharzone\">\n       <file name=\"index.html\">\n        <chit></chit>\n       </file>\n     </example>\n   *\n   */\n  angular\n    .module('pharzone')\n    .directive('chit', chit);\n\n  function chit(Api) {\n    return {\n      restrict: 'EA',\n      scope: {},\n      templateUrl: 'blocks/chit/chit-directive.tpl.html',\n      replace: false,\n      controllerAs: 'chit',\n      controller() {\n        let vm = this;\n        vm.name = 'chit';\n        vm.models = Api.models;\n      },\n      link(scope, element, attrs) {\n        /* jshint unused:false */\n        console.log('attrs.chit', attrs.chit);\n        function tryParseJSON (jsonString){\n          try {\n            var o = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n            // but... JSON.parse(null) returns 'null', and typeof null === \"object\",\n            // so we must check for that, too.\n            if (o && typeof o === \"object\" && o !== null) {\n              return o;\n            }\n          }\n          catch (e) { }\n\n          return false;\n        };\n        tryParseJSON(attrs.chit) ? (scope.model = {}, scope.model.inputs = JSON.parse(attrs.chit)): scope.model = Api.models[attrs.chit];\n        /* eslint \"no-unused-vars\": [2, {\"args\": \"none\"}] */\n      }\n    };\n  }\n}());\n"],"sourceRoot":"/source/"}